#!/bin/bash

# check the relation between two references (branches/tags/commits) in the commits graph
if [ $# -eq 2 ]; then
    FIRST_BRANCH=$1
    SECOND_BRANCH=$2
else
    echo "Usage: git ref-rel <first_branch> <second_branch>"
    echo $#
    exit
fi

if ! git rev-parse --quiet --verify $FIRST_BRANCH &>/dev/null; then
    echo "Branch '$FIRST_BRANCH' does not exist"
    exit
fi

if ! git rev-parse --quiet --verify $SECOND_BRANCH &>/dev/null; then
    echo "Branch '$SECOND_BRANCH' does not exist"
    exit
fi

REV_LIST_OUT=$(git rev-list --left-right --count $FIRST_BRANCH...$SECOND_BRANCH)

AHEAD=$(echo "$REV_LIST_OUT"  | awk '{print $1}')
BEHIND=$(echo "$REV_LIST_OUT" | awk '{print $2}')

MERGE_BASE=$(git merge-base $FIRST_BRANCH $SECOND_BRANCH)
# %C(auto) is used to enable automatic colorization. Git will choose appropriate colors based on the context.
# %H displays the commit hash.
# %d displays decorations (branches and tags).
# %s displays the commit subject (the first line of the commit message).
MERGE_BASE_DECORATED=$(git log -1 --format='%C(auto)%H%d %C(auto)%s' $MERGE_BASE)

echo $FIRST_BRANCH is ahead $AHEAD, behind $BEHIND commits of $SECOND_BRANCH
echo The merge base is $MERGE_BASE_DECORATED